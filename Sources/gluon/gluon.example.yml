# Gluon example config file

# projectPrefix (optional): the ID to prefix to task IDs when none is present.
projectPrefix: TEST-
# projectIdTrailerName (optional): if using git trailers to identify task IDs, which trailer name denotes a task ID.
# The trailer can, but does not have to, use the same project prefix as above.
projectIdTrailerName: Jira-Id
# subjectMaxLineLength (optional): if set, this enforces the line length of the commit subject in the `lint` command.
subjectMaxLineLength: 50
# bodyMaxLineLength (optional): if set, this enforces the line length of the commit body in the `lint` command.
bodyMaxLineLength: 72
# branchNameLinting (optional): sets options for linting of branch names.
branchNameLinting:
  # projectIdsInBranches: defaults to never. Options are:
  #   - never: don't check that a project ID is included in the branch name.
  #   - always: every branch name should contain a project ID.
  #   - commitsMustMatch: if a branch name mentions a project ID, the commits in the branch must contain the same IDs.
  projectIdsInBranches: always
  # projectIdRegexes: a list of regular expressions to match the project ID inside the branch name.
  projectIdRegexes:
  - '[A-Z]{2,10}-[0-9]{2,5}'
  - (^|[^\.\-\_0-9A-Z])([0-9]{3,5})
# commitCategories: a list of commit categories that are allowed by the `lint` subcommand.
commitCategories:
- name: feat # the name of the commit type.
  description: Implements a new feature. # the description of the commit type.
  increment: # optional: which component of the version number to increment. Defaults to patch.
    minor: {}
- name: fix
  description: Fixes an issue.
- name: test
  description: Fixes or implements a test.
- name: refactor
  description: Changes code, but does not implement a fix or feature.
- name: build
  description: Changes the build system or external dependencies.
- name: doc
  description: Corrects/updates documentation for a feature or architectural decision.
- name: ci
  description: Fixes or implements a continuous integration feature.
# trains (optional): a list of build trains to ship from the repository.
trains:
- name: TestTarget-mac # the name of the build train. It should match against the project's corresponding build target.
  displayName: mac # optional: the name to use for the train when generating an annotated release tag.
  tagPrefix: mac/ # required if configuring multiple trains: what to prefix the tag with when creating a release.
  # replace (optional): specifies locations in the project to replace the version, or version components.
  replace:
  - key: CFBundleVersion # If structured data, which key to replace. If plaintext, which text to replace in the file.
    file: apps/mac/TestTarget/Info.plist # The relative path to the file from the repository root.
    # item (optional): the component of the version to use for the replacement. Options are:
    #   - fullVersion (default value): the entire semantic version.
    #   - version: The version, without any prerelease or build identifiers.
    #   - identifiers: All release identifiers, without the version component.
    #   - prereleaseIdentifiers: Prerelease identifiers only.
    #   - buildIdentifiers: Build identifiers only.
    item: version
    # format (optional): the format of the file subject to modification. Options are:
    #   - plaintext (default): a plain text file.
    #   - json: A json file.
    #   - plist: A property list file.
    #   - yaml: A yaml file.
    format: plist
  - key: CFBundleShortVersionString
    file: apps/mac/TestTarget/Info.plist
    item: fullVersion
    format: plist

